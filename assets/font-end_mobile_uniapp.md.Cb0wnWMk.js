import{_ as i,o as a,c as n,a3 as l}from"./chunks/framework.QX3Xs2QT.js";const o=JSON.parse('{"title":"移动端基础","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/mobile/uniapp.md","filePath":"font-end/mobile/uniapp.md"}'),t={name:"font-end/mobile/uniapp.md"};function p(h,s,e,k,E,r){return a(),n("div",null,s[0]||(s[0]=[l(`<h1 id="移动端基础" tabindex="-1">移动端基础 <a class="header-anchor" href="#移动端基础" aria-label="Permalink to &quot;移动端基础&quot;">​</a></h1><h2 id="移动端分类" tabindex="-1">移动端分类 <a class="header-anchor" href="#移动端分类" aria-label="Permalink to &quot;移动端分类&quot;">​</a></h2><ul><li>Native App： 本地应用程序（原生App） <ul><li>即：纯原生安卓开发(java) 纯原生IOS开发(ObjectC Swift)</li><li>优点：性能好(流畅)，权限高</li><li>缺点：开发成本高，维护成本高</li></ul></li><li>Web App：网页应用程序（h5） <ul><li>即：手机端的网页</li><li>优点：成本低</li><li>缺点：性能差(不流畅)，权限低(调用不了手机硬件api)</li></ul></li><li>Hybrid App：混合应用程序（混合App）【多】 <ul><li>即：原生app壳子有一个webview组件，相当于嵌入的一个浏览器，显示h5网页，可以做原生app做不了的炫酷的动画效果和很多活动页，现在app基本上都是混合app。</li><li>如：uniapp, 小程序，快应用</li><li>优点：性能好，权限高</li><li>缺点：webview嵌入h5消耗性能，就目前手机来说不是缺点了</li></ul></li></ul><h2 id="移动端单位-手机屏幕参数" tabindex="-1">移动端单位（手机屏幕参数） <a class="header-anchor" href="#移动端单位-手机屏幕参数" aria-label="Permalink to &quot;移动端单位（手机屏幕参数）&quot;">​</a></h2><ul><li>屏幕尺寸：对角线的长（COL-AL10：5.84英寸）</li><li>分辨率：指宽度上和高度上物理像素点个数（能显示的最多的像素点，即可设置的最大分辨率）(iphone8：750x1334； COL-AL10：720x1520)</li><li>物理像素：物理像素点，即分辨率。</li><li>逻辑像素：如css像素(即px)，与设备无关，与宽度有关。(iphone8：375x667px；COL-AL10：360x760px)</li><li>设备像素比(DPR) = 物理像素 / 逻辑像素 （iPhone为2，用2个物理像素点表示一个css像素）</li><li><strong>所以屏幕分辨率越高，即物理像素(点)越多，所以DPR越高，即1个css像素相当于更多的物理像素(点)，所以显示就越清晰</strong></li><li>设计图宽度：一般指物理像素（如以iphone8的750为标准）</li><li>css常用单位 <ul><li>px：css像素单位</li><li>em：1rem = 当前元素的font-size(px)。即相对自身的fontSize或继承的fontSize。</li><li>rem：1rem = html的font-size(px)</li><li>vw vh 与 %：vw和vh视口单位相对于可视窗口（浏览器/手机屏幕）的宽高（1vw = 可视窗口宽度的百分之一），%百分比单位相对于父元素的宽高。</li><li>rpx/upx：1rpx = 设备宽度(px) / 750 。需要特定uniapp、微信小程序等支持，其他单位通用。（设备宽度=屏幕宽度=逻辑像素）</li></ul></li></ul><h2 id="移动端适配方案-移动端屏幕自适应" tabindex="-1">移动端适配方案（移动端屏幕自适应） <a class="header-anchor" href="#移动端适配方案-移动端屏幕自适应" aria-label="Permalink to &quot;移动端适配方案（移动端屏幕自适应）&quot;">​</a></h2><blockquote><p>使用相对单位做适配，核心是不同设备的屏幕宽度不同。flex布局是通用的。</p></blockquote><h3 id="h5-rem" tabindex="-1">H5 ( rem ) <a class="header-anchor" href="#h5-rem" aria-label="Permalink to &quot;H5 ( rem )&quot;">​</a></h3><blockquote><p>rem做适配原理：1rem = html的font-size(px)，根据屏幕的宽度调整html字体大小。</p></blockquote><pre><code>1. 设计稿 750（二倍图规范），屏幕宽度375px，设计html的fontSize为375px/10=37.5px，于是1rem=37.5px，1px=1/37.5rem
2. 设计稿上的一个元素750x500，px单位375x250px，rem单位(375/37.5)x(250/37.5)rem即10x6.67rem。 (750/75)x(500/75)rem
3. 若设备屏幕宽360px，html的fontsize为36px，于是1rem=36px,1px=1/36rem，所以元素的rem==&gt;px即360x121.32px。

// 获取屏幕的宽度可以用document.documentElement.getBoundingClientRect().width。【此api需要documentapi，所以需要浏览器环境】
&lt;head&gt;
&lt;script&gt;
    // 获取屏幕宽度
    let width = document.documentElement.getBoundingClientRect().width;
    // 设置html字体大小
    document.documentElement.style.fontSize = width/10+&#39;px&#39;;
&lt;/script&gt;
&lt;/head&gt;
</code></pre><h3 id="uniapp-rpx" tabindex="-1">uniapp（ rpx） <a class="header-anchor" href="#uniapp-rpx" aria-label="Permalink to &quot;uniapp（ rpx）&quot;">​</a></h3><blockquote><p>可以用rem做适配，但更好的是用rpx，rpx做适配原理：1rpx = 设备宽度(px) / 750。</p></blockquote><pre><code>1. 设计稿 750，屏幕宽375px，于是 1rpx = 375px/750 = 0.5px，1px = 2rpx
2. 设计稿上有个元素750x500 即px单位375x250px，rpx单位750x500rpx
3. 若设备屏幕宽360px，1rpx = 360/750 px，1px = 750/360 rpx，所以元素的rpx==&gt;px即宽750x(360/750)px= 360px 高同理。
</code></pre><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// uniapp获取屏幕宽度需要用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.windowWidth) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 屏幕可用宽</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.windowHeight) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 屏幕可用高（除导航栏和tabbar）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfoSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().windowHeight </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同步获取</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 示例：获取屏幕高度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;con&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{height}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 一定要先定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">					this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.windowHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.con</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rpx;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#4CD964</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 获取屏幕高度且转化为rpx单位（实际中没有必要）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;con&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{height}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">					// 1rpx = res.windowWidth / 750 px , 1px = 750 / res.windowWidth rpx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">					let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.windowHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">750</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.windowWidth) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;px&#39; ==&gt; rpx&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">					this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rpx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="移动多端的兼容问题" tabindex="-1">移动多端的兼容问题？ <a class="header-anchor" href="#移动多端的兼容问题" aria-label="Permalink to &quot;移动多端的兼容问题？&quot;">​</a></h2><h3 id="移动端touch和click和tap的区别" tabindex="-1">移动端touch和click和tap的区别 <a class="header-anchor" href="#移动端touch和click和tap的区别" aria-label="Permalink to &quot;移动端touch和click和tap的区别&quot;">​</a></h3><h3 id="如何处理ios端点击的300ms的延迟" tabindex="-1">如何处理ios端点击的300ms的延迟 <a class="header-anchor" href="#如何处理ios端点击的300ms的延迟" aria-label="Permalink to &quot;如何处理ios端点击的300ms的延迟&quot;">​</a></h3><h1 id="uniapp" tabindex="-1">uniapp <a class="header-anchor" href="#uniapp" aria-label="Permalink to &quot;uniapp&quot;">​</a></h1><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><pre><code>uniapp是生命周期有三类，一类是应用生命周期，在APP.vue中，一类是页面生命周期，在页面中，一类是组件生命周期，在vue组件中
应用生命周期常用的是：onLaunch onShow onHide
页面生命周期常用的是：onLoad onShow onHide onReady 还有页面触底、下拉刷新、点击标题栏按钮等等
组件生命周期就是vue组件的生命周期
</code></pre><ul><li>一个应用创建（启动）了，触发应用生命周期</li><li>一个页面创建了，触发页面生命周期，组件生命周期（少）</li><li>一个组件创建了，只能触发组件生命周期</li></ul><h2 id="路由跳转及传参-页面即是路由" tabindex="-1">路由跳转及传参（页面即是路由） <a class="header-anchor" href="#路由跳转及传参-页面即是路由" aria-label="Permalink to &quot;路由跳转及传参（页面即是路由）&quot;">​</a></h2><blockquote><p>页面栈：getCurrentPages()获取当前的页面栈，当前页面总是在栈顶</p></blockquote><ul><li><p>声明式导航（少）</p><ul><li>&lt;navigator&gt; 组件open-type属性决定跳转方式</li></ul></li><li><p>编程式导航</p><ul><li>uni.navigateTo() 新页面入栈。</li><li>uni.redirectTo() 当前页面出栈，新页面入栈。</li><li>uni.reLaunch() 所有页面出栈，新页面入栈。</li><li>uni.switchTab() 所有页面出栈，tabbar页面入栈。跳转tabbar。【tabbar页面加载一次后默认不会销毁，不会触发onunload】</li><li>uni.navigateBack() 页面出栈（出几个可设置）。</li></ul></li><li><p>跳转传参</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/pages/a/a?name=lisi&amp;age=14&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// url有长度限制，太长的字符串会传递失败，可改用窗体通信、全局变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 另外参数中出现空格等特殊字符时需要对参数进行编码，如下为使用encodeURIComponent对参数进行编码的示例。</span></span></code></pre></div><ul><li>接收参数</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在onload钩子中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {name: &quot;lisi&quot;, age: &quot;14&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="uniapp全局变量的实现" tabindex="-1">uniapp全局变量的实现 <a class="header-anchor" href="#uniapp全局变量的实现" aria-label="Permalink to &quot;uniapp全局变量的实现&quot;">​</a></h2><blockquote><p><a href="https://www.uviewui.com/guide/globalVariable.html#vuex%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">全局变量的实现</a> 是否是动态响应的详细看代码</p></blockquote><h3 id="_1-storage本地存储" tabindex="-1">1. storage本地存储 <a class="header-anchor" href="#_1-storage本地存储" aria-label="Permalink to &quot;1. storage本地存储&quot;">​</a></h3><ul><li>APP、小程序等重新启动数据不会丢失（只有本地存储才能保证数据改变后不会消失，不会还原成初始数据）</li><li>需要将一个变量保存很长一段时间，比如用户的登录状态(Token)， 频繁对这种方式进行存和取，是有性能消耗的，应用生命周期(应用从启动到关闭)内使用的变量，不应该使用此方式操作。</li></ul><h3 id="_2-配置文件" tabindex="-1">2. 配置文件 <a class="header-anchor" href="#_2-配置文件" aria-label="Permalink to &quot;2. 配置文件&quot;">​</a></h3><ul><li>可以把向后端请求的域名等不变的数据写到配置文件中，其他情况不适用这种存储变量的方式。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量写入到js文件中: common/config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	domain: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 再导出使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/common/config.js&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config.domain);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-挂载到vue-prototype" tabindex="-1">3. 挂载到Vue.prototype <a class="header-anchor" href="#_3-挂载到vue-prototype" aria-label="Permalink to &quot;3. 挂载到Vue.prototype&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以在main.js中将config.js挂载到Vue.prototype</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/common/config.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.domain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.domain;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--使用--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!-- 微信小程序中值为undefined，其他端奏效 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		值为：{{this.domain}}  // undefined，显示 （）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{domain}}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  // undefined，不显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.domain) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 微信小程序中奏效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_4-globaldata" tabindex="-1">4. globalData <a class="header-anchor" href="#_4-globaldata" aria-label="Permalink to &quot;4. globalData&quot;">​</a></h3><h3 id="_5-vuex-是全局动态响应的" tabindex="-1">5. Vuex (是全局动态响应的) <a class="header-anchor" href="#_5-vuex-是全局动态响应的" aria-label="Permalink to &quot;5. Vuex (是全局动态响应的)&quot;">​</a></h3><blockquote><p>改变数据后重启失效（APP，微信小程序，h5），还是原始数据，需要数据持久化的数据，借用storage本地存储</p></blockquote><h2 id="uniapp组件通信和页面通讯" tabindex="-1">uniapp组件通信和页面通讯 <a class="header-anchor" href="#uniapp组件通信和页面通讯" aria-label="Permalink to &quot;uniapp组件通信和页面通讯&quot;">​</a></h2><h3 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h3><ol><li>props √</li><li>自定义事件 √</li><li>全局事件总线 GlobalEventBus √ （组件通信：h5有效，app有效，微信小程序报错）</li><li>消息订阅与发布（pubsub-js）不推荐，因为要npm下载第三方插件，没有做多端兼容 ❌</li><li>插槽 √</li><li>vuex 3.x等全局变量的实现 √</li></ol><h3 id="页面通信" tabindex="-1">页面通信 <a class="header-anchor" href="#页面通信" aria-label="Permalink to &quot;页面通信&quot;">​</a></h3><ol><li>uni内置了事件uni.<code>$on uni.$</code>emit 是做页面通讯的，注意区别上面3. 全局事件总线的组件通信 √</li><li>vuex 3.x等全局变量的实现 √</li></ol><h2 id="uniapp分包配置" tabindex="-1">uniapp分包配置 <a class="header-anchor" href="#uniapp分包配置" aria-label="Permalink to &quot;uniapp分包配置&quot;">​</a></h2><blockquote><p>小程序启动时，默认会读取pages.json下载主包（就是在pages.json中的pages定义的页面，对应pages目录）并启动首页。 分包（pages.json中的subPackages，对应subpages目录）就是按需下载页面（去哪个页面就下载哪个页面）。类似vue的路由懒加载。 再配置分包预下载。类型vue的路由预加载。 APP还需要再manifest.json中配置，具体见文档</p></blockquote><h2 id="说明-旨在统一项目风格" tabindex="-1">说明 - 旨在统一项目风格 <a class="header-anchor" href="#说明-旨在统一项目风格" aria-label="Permalink to &quot;说明 - 旨在统一项目风格&quot;">​</a></h2><h3 id="工程目录约定-分为默认的和自建的" tabindex="-1">工程目录约定 （分为默认的和自建的） <a class="header-anchor" href="#工程目录约定-分为默认的和自建的" aria-label="Permalink to &quot;工程目录约定 （分为默认的和自建的）&quot;">​</a></h3><blockquote><p><a href="https://uniapp.dcloud.io/tutorial/project.html#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" target="_blank" rel="noreferrer">官网</a></p></blockquote><pre><code>┌─uniCloud              云空间目录
│─components            公共组件目录（符合规范即可直接使用）
├─hybrid                App端存放本地html文件的目录
├─platforms             存放各平台专用页面的目录
├─pages                 业务页面
│  ├─index
│  │  └─index.vue       index页面
│  └─list
│     └─list.vue        list页面
├─subpages							分包页面
├─static                存放应用引用的本地静态资源（图片、视频等），注意：静态资源只能存放于此，static目录会被完整打包进去，且不会编译
├─common								公共资源（自建）
├─api										请求封装（自建）
├─store									vuex状态管理（自建）
├─uni_modules           存放[uni_module](/uni_modules)规范的插件。
├─wxcomponents          存放小程序组件的目录
├─main.js               入口
├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期（注意不要写模板语法）
├─manifest.json         打包配置（注意要先配置一下）
├─vue.config.js 				编译配置（自建）
├─pages.json            全局配置，配置页面路由、导航条、选项卡等页面类信息
└─uni.scss              全局样式
</code></pre><h3 id="资源引入约定-路径约定" tabindex="-1">资源引入约定（路径约定） <a class="header-anchor" href="#资源引入约定-路径约定" aria-label="Permalink to &quot;资源引入约定（路径约定）&quot;">​</a></h3><blockquote><p>统一约定使用绝对路径，且使用 @（Hbuild创建的项目中 @ 指向项目根目录，cli项目中 @ 指向src目录）</p></blockquote><pre><code>&lt;!-- 引用js，js文件或script标签内 --&gt;
import add from &#39;@/common/add.js&#39;;

&lt;!-- 引用css，css文件或style标签内 --&gt;
@import &quot;@/common/uni.css&quot;;

&lt;!-- 引用图片或视频，在标签的src属性中 --&gt;
&lt;image class=&quot;logo&quot; src=&quot;@/static/logo.png&quot;&gt;&lt;/image&gt;

&lt;!-- 引用图片，css文件或style标签内 --&gt;
background-image: url(@/static/logo.png);
</code></pre><pre><code>&lt;!-- 路由路径跳转约定 --&gt;
/ 开头的绝对路径
</code></pre><h3 id="运行环境判断与跨段兼容" tabindex="-1">运行环境判断与跨段兼容 <a class="header-anchor" href="#运行环境判断与跨段兼容" aria-label="Permalink to &quot;运行环境判断与跨段兼容&quot;">​</a></h3><h4 id="开发环境和生产环境及测试环境" tabindex="-1">开发环境和生产环境及测试环境 <a class="header-anchor" href="#开发环境和生产环境及测试环境" aria-label="Permalink to &quot;开发环境和生产环境及测试环境&quot;">​</a></h4><blockquote><p><a href="https://uniapp.dcloud.io/worktile/running-env.html#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%92%8C%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83" target="_blank" rel="noreferrer">官网</a></p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一般写在main.js配置一些运行的参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;开发环境&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;生产环境&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="判断平台即跨段兼容" tabindex="-1">判断平台即跨段兼容 <a class="header-anchor" href="#判断平台即跨段兼容" aria-label="Permalink to &quot;判断平台即跨段兼容&quot;">​</a></h4><blockquote><p>两种场景：在编译期判断（推荐） / 在运行期判断</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在编译期判断：条件编译（选择代码编译） </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef H5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;只有h5平台才有alert方法&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在运行期判断：api（选择代码运行） </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemInfoSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().platform) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;android&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;运行Android上&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;运行iOS上&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;运行在开发者工具上&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="其他约定" tabindex="-1">其他约定 <a class="header-anchor" href="#其他约定" aria-label="Permalink to &quot;其他约定&quot;">​</a></h3><h4 id="单位" tabindex="-1">单位 <a class="header-anchor" href="#单位" aria-label="Permalink to &quot;单位&quot;">​</a></h4><blockquote><p>推荐字体和宽高等，都使用rpx单位，如果真的需要固定尺寸，就是用px。可以使用vw vh单位</p></blockquote><h4 id="关于nvue" tabindex="-1">关于nvue <a class="header-anchor" href="#关于nvue" aria-label="Permalink to &quot;关于nvue&quot;">​</a></h4><blockquote><p>如果应用不复杂，用vue即可。<a href="https://uniapp.dcloud.io/tutorial/nvue-outline.html#%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">nvue</a></p></blockquote><h4 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h4><blockquote><p>使用flex，不用 float</p></blockquote><h3 id="uview" tabindex="-1">uview <a class="header-anchor" href="#uview" aria-label="Permalink to &quot;uview&quot;">​</a></h3><h4 id="uview封装的第三方-luch-request" tabindex="-1">uview封装的第三方 luch-request <a class="header-anchor" href="#uview封装的第三方-luch-request" aria-label="Permalink to &quot;uview封装的第三方 luch-request&quot;">​</a></h4><blockquote><p>跨域是浏览器的专用概念，如果你是做App、小程序等非H5平台，是不涉及跨域问题的。</p></blockquote><h2 id="自定义基座" tabindex="-1">自定义基座 <a class="header-anchor" href="#自定义基座" aria-label="Permalink to &quot;自定义基座&quot;">​</a></h2><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">运行原理：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在非h5端运行：分为逻辑层（运行js）和视图层（页面渲染）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    逻辑层：js api包含ECMAScript的api和uni扩展api，没有兼容问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    视图层：h5和小程序和app-vue的视图层是webview，app-nvue的视图层是基于weex改造的原生渲染视图。app-vue（使用系统webview）会有css兼容问题，此时不要用太新的css语法，或者集成腾讯x5引擎。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">逻辑层和视图层分离的利与弊：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    利：js运算不卡渲染，如：动画稳，不卡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    弊：这两层互相通信是有损耗的（各种非h5端都有损耗，在Android低端机上表现明显）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    解决弊（使得交互流畅）：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        在app-vue和小程序上，提供了一种运行于视图层的专属js（微信小程序叫做wxs）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        在app-nvue里，逻辑层和视图层的折损一样存在。使用bindingx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app-vue和小程序的数据更新，分页面级和组件级</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">避免使用大图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">优化数据更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">长列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app-vue和小程序的数据更新，分组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    组件分页</span></span></code></pre></div><h3 id="nvue" tabindex="-1">nvue <a class="header-anchor" href="#nvue" aria-label="Permalink to &quot;nvue&quot;">​</a></h3><h2 id="常见业务逻辑" tabindex="-1">常见业务逻辑 <a class="header-anchor" href="#常见业务逻辑" aria-label="Permalink to &quot;常见业务逻辑&quot;">​</a></h2><h3 id="登录" tabindex="-1">登录 <a class="header-anchor" href="#登录" aria-label="Permalink to &quot;登录&quot;">​</a></h3><blockquote><p>手机号、邮箱、昵称结合密码登录。手机号验证码登录。手机号一键登录。第三方登录（qq、微信、邮箱等等）</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>数据表设计</span></span>
<span class="line"><span>1. user 用户表</span></span>
<span class="line"><span>    id 用户id</span></span>
<span class="line"><span>    username  用户名（昵称）</span></span>
<span class="line"><span>    phone 手机号</span></span>
<span class="line"><span>    email 邮箱</span></span>
<span class="line"><span>    password 密码</span></span>
<span class="line"><span>    create_time 创建时间</span></span>
<span class="line"><span>    status 状态 0禁用 1启用</span></span>
<span class="line"><span>2. userinfo 用户信息表</span></span>
<span class="line"><span>    id 用户信息id</span></span>
<span class="line"><span>    user_id 用户id</span></span>
<span class="line"><span>    gender</span></span>
<span class="line"><span>    age</span></span>
<span class="line"><span>    job</span></span>
<span class="line"><span>    address</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>3. user_bind 第三方登录表</span></span>
<span class="line"><span>    id</span></span>
<span class="line"><span>    user_id 用户id</span></span>
<span class="line"><span>    type 第三方登录类型（weixin、qq、sinaweibo...）</span></span>
<span class="line"><span>    openid 第三方登录唯一标识</span></span>
<span class="line"><span>    nickname 第三方昵称</span></span>
<span class="line"><span>    avatarurl 第三方头像</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>手机号验证码</span></span>
<span class="line"><span>点击获取验证码 -&gt; 验证手机号码 -&gt; 发给后端</span></span></code></pre></div><h3 id="使用nvue封装横向滚动组件和下拉刷新上拉加载功能和吸顶功能" tabindex="-1">使用nvue封装横向滚动组件和下拉刷新上拉加载功能和吸顶功能 <a class="header-anchor" href="#使用nvue封装横向滚动组件和下拉刷新上拉加载功能和吸顶功能" aria-label="Permalink to &quot;使用nvue封装横向滚动组件和下拉刷新上拉加载功能和吸顶功能&quot;">​</a></h3><h3 id="列表的上拉刷新和下拉加载" tabindex="-1">列表的上拉刷新和下拉加载 <a class="header-anchor" href="#列表的上拉刷新和下拉加载" aria-label="Permalink to &quot;列表的上拉刷新和下拉加载&quot;">​</a></h3><ul><li>上拉刷新（有三个状态：加载前提示加载更多more，加载中loading，提示没有更多nomore） <ol><li>如何触发上拉刷新：页面的触底钩子，scroll-view组件的触底事件</li><li>判断没有更多数据了，状态改为nomore，然后return</li><li>状态改为loading，开始请求数据（请求完毕把状态改为more），追加数据</li></ol></li></ul><h2 id="uni-push厂商兼容推送消息" tabindex="-1">uni.push厂商兼容推送消息 <a class="header-anchor" href="#uni-push厂商兼容推送消息" aria-label="Permalink to &quot;uni.push厂商兼容推送消息&quot;">​</a></h2><h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h1><h2 id="uniapp无线真机调试" tabindex="-1">uniapp无线真机调试 <a class="header-anchor" href="#uniapp无线真机调试" aria-label="Permalink to &quot;uniapp无线真机调试&quot;">​</a></h2><pre><code>1. Android设备开启USB调试，并且通过USB线连接到电脑，选择传输文件。
2. 进入 HBuilderX\\plugins\\launcher\\tools\\adbs 目录 ，命令行操作。
3. cmd命令执行以下命令”adb tcpip 5555“ 使手机监听这个端口。此时拔出USB线。
4. cmd命令执行以下命令”adb connect 192.168.1.7“(Android设备的IP地址)，等待一会。
5. 断开wifi连接：adb disconnect
6. 如果需要恢复到USB数据线，可以在命令行输入adb usb，也可以adb disconnect 192.168.2.157：5555
</code></pre><h2 id="微信小程序id" tabindex="-1">微信小程序ID <a class="header-anchor" href="#微信小程序id" aria-label="Permalink to &quot;微信小程序ID&quot;">​</a></h2><pre><code>3163852521@qq.com的开发者ID：
AppID(小程序ID)
wxbf9319f62266c3e9
AppSecret(小程序密钥)
935557732a606c5e2efa0e0f6d9eb7dc
</code></pre><h2 id="uniapp发现的bug" tabindex="-1">uniapp发现的bug <a class="header-anchor" href="#uniapp发现的bug" aria-label="Permalink to &quot;uniapp发现的bug&quot;">​</a></h2><h3 id="命名插槽使用v-bind绑定变量时在app端不奏效" tabindex="-1">命名插槽使用v-bind绑定变量时在App端不奏效 <a class="header-anchor" href="#命名插槽使用v-bind绑定变量时在app端不奏效" aria-label="Permalink to &quot;命名插槽使用v-bind绑定变量时在App端不奏效&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--子组件：Test--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{a}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &#39;不奏效&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		&lt;!-- &lt;slot :name=&quot;&#39;a&#39;&quot;&gt;{{a}}&lt;/slot&gt; --&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;奏效&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--父组件中使用--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-slot:a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,96)]))}const g=i(t,[["render",p]]);export{o as __pageData,g as default};
